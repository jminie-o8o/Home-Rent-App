# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "backend_develop" ]
  pull_request:
    branches: [ "backend_develop" ]

jobs:
  build:

    runs-on: ubuntu-latest
    env:
          working-directory: ./BE/house 
          #워크플로우가 동작할 디렉토리

    steps:
      - uses: actions/checkout@v2

      # JDK11로 gradle 빌드
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'temurin'
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
        working-directory: ${{ env.working-directory }}
      - name: Build with Gradle
        run: ./gradlew bootjar
        working-directory: ${{ env.working-directory }}


      # 도커 빌드(도커 이미지 생성)
      - name: Docker build
        working-directory: ${{ env.working-directory }}
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -t ${{ secrets.DOCKER_USERNAME }}/house-rent-app:1.0 .
          docker push ${{ secrets.DOCKER_USERNAME }}/house-rent-app:1.0
          docker rmi ${{ secrets.DOCKER_USERNAME }}/house-rent-app:1.0

      # 도커 이미지 배포 및 실행(EC2 ubuntu20.04로 배포)
      - name: Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AWS_HOST_DNS }}
          username: ubuntu
          key: ${{ secrets.SSH_SECRET_KEY }}
          envs: GITHUB_SHA
          script: |
            sudo docker ps -a -q --filter "name=house-rent-app" | grep -q . && docker stop house-rent-app && docker rm house-rent-app | true
            sudo docker rmi ${{ secrets.DOCKER_USERNAME }}/house-rent-app:1.0
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/house-rent-app:1.0
            sudo docker run -d -p 80:8080 --name house-rent-app -e MY_DATABASE_USERNAME=${{ secrets.MY_DATABASE_USERNAME }} -e MY_DATABASE_PASSWORD=${{ secrets.MY_DATABASE_PASSWORD }} -e S3_SECRET_KEY=${{ secrets.S3_SECRET_KEY }} -e S3_ACCESS_KEY=${{ secrets.S3_ACCESS_KEY }} -e NAVER_USER_URL=${{ secrets.NAVER_USER_URL }} -e NAVER_STATE=${{ secrets.NAVER_STATE }} -e NAVER_SECRET_KEY=${{ secrets.NAVER_SECRET_KEY }} -e NAVER_CLIENT_ID=${{ secrets.NAVER_CLIENT_ID }} -e NAVER_AUTH_URL=${{ secrets.NAVER_AUTH_URL }} -e KAKAO_USER_URL=${{ secrets.KAKAO_USER_URL }} -e KAKAO_CLIENT_ID=${{ secrets.KAKAO_CLIENT_ID }} -e KAKAO_AUTH_URL=${{ secrets.KAKAO_AUTH_URL }} -e JWT_SECRET=${{ secrets.JWT_SECRET }} ${{ secrets.DOCKER_USERNAME }}/house-rent-app:1.0
            sudo docker rmi -f $(docker images -f "dangling=true" -q) || true
